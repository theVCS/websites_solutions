Firstly, let's choose some deepest (farthest from the root) vertex fv in the query (among all such vertices we can choose any). It is obvious that every vertex in the query should either belong to the path from the root to fv or the distance to some vertex of this path should be at most one. Now there are two ways: write some LCA algorithms and other hard stuff which is unnecessary in this problem or write about 15 lines of code and solve the problem.

Let's take every non-root vertex (except fv) and replace it with its parent. So, what's next? Now the answer is "YES" if each vertex (after transformation) belongs to the path from root to fv. Now we just need to check if it is true.

We can do this using the very standard technique: firstly, let's run dfs from the root and calculate for each vertex the first time we visited it (tin) and the last time we visited it (tout).

We can do this using the following code:


void dfs(int v, int par = -1) {
    tin[v] = T++;
    for (auto to : g[v]) {
        if (to == par) continue;
        dfs(to, v);
    }
    tout[v] = T++;
}
Initially, T equals zero. Now we have a beautiful structure giving us so much information about the tree. Consider all segments [tinv;toutv]. We can see that there is no pair of intersecting segments. The pair of segments [tinv;toutv] and [tinu;toutu] is either non-intersecting at all or one segment lies inside the other one. The second beautiful fact is that for each vertex u in the subtree of v the segment [tinu;toutu] lies inside the segment [tinv;toutv].

So, we can check if one vertex is the parent of the other: the vertex v is the parent of the vertex u if and only if tinv≤tinu and toutu≤toutv (the vertex is the parent of itself).

How do we check if the vertex u lies on the path from the root to the vertex fv? It lies on this path if the root is the parent of u (it is always true) and u is the parent of fv. This approach can be used for each vertical path (such a path from x to y that lca(x,y) is either x or y).

Time complexity: O(n+m).